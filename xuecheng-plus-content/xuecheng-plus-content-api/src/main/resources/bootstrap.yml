spring:
  application:
    name: content-api
  profiles:
    active: dev
  cloud:
    nacos:
      server-addr: 111.228.43.9:8848
      username: nacos
      password: A1472580369Z
      # ========== 服务发现配置 ==========
      # 说明:将当前微服务注册到Nacos服务注册中心
      # 作用:让其他服务能够发现并调用本服务
      discovery:
        namespace: dev-xuecheng           # 命名空间(区分环境:开发/测试/生产)
        group: xuecheng-plus-project      # 分组(区分项目)
      
      # ========== 配置中心配置 ==========
      # 说明:从Nacos配置中心拉取配置文件
      # 作用:实现配置集中管理和动态更新
      # 拉取的配置文件名:content-api-dev.yaml (根据服务名+环境+扩展名组成)
      config:
        namespace: dev-xuecheng           # 配置中心命名空间(与discovery可以不同)
        group: xuecheng-plus-project      # 配置中心分组(与discovery可以不同)
        file-extension: yaml              # 配置文件扩展名(yaml/properties/json等)
        
        # ========== 扩展配置 ==========
        # 说明:引用其他微服务的配置文件
        # 应用场景:API层依赖Service层,需要Service层的数据库配置
        #
        # 讲师原话:
        # "API层本身不需要数据库连接,但因为依赖了Service层,
        #  所以需要通过extension-configs引用Service的配置,
        #  这样API层就不需要重复配置数据库了"
        #
        # 配置复用的好处:
        # 1. 避免重复配置(DRY原则)
        # 2. 统一管理,修改一处生效
        # 3. 职责清晰:Service层管数据库,API层管接口
        extension-configs:
          # 引用content-service的配置
          - data-id: content-service-${spring.profiles.active}.yaml  # 配置文件名(支持变量)
            group: xuecheng-plus-project     # 配置文件所属分组
            refresh: true                    # 支持动态刷新
         
        # ========== 共享配置 ==========
        # 说明:引用公共配置文件(多个微服务共享)
        # 应用场景:swagger、logging等所有微服务都需要的配置
        #
        # shared-configs与extension-configs的区别:
        # - extension-configs:引用其他微服务的配置(依赖关系)
        # - shared-configs:引用公共配置(共享关系)
        shared-configs:
          # 引用swagger公共配置
          - data-id: swagger-${spring.profiles.active}.yaml
            group: xuecheng-plus-common      # 注意:公共配置使用COMMON分组
            refresh: true
          # 引用logging公共配置
          - data-id: logging-${spring.profiles.active}.yaml
            group: xuecheng-plus-common
            refresh: true
