# ========================================================================
# Nacos配置文件：content-service-dev.yaml
# ========================================================================
# 
# 使用说明：
# 1. 登录Nacos控制台：http://114.132.63.109:8848/nacos
# 2. 左侧菜单：配置管理 → 配置列表
# 3. 切换到命名空间：dev-xuecheng
# 4. 点击右上角"+"按钮，创建配置
# 5. 填写配置信息：
#    - Data ID: content-service-dev.yaml
#    - Group: XUECHENG-PLUS-PROJECT  
#    - 配置格式: YAML
# 6. 将下面的内容复制粘贴到"配置内容"框中
# 7. 点击"发布"
#
# ⚠️ 设计理念：
# - Service层只配置业务相关的配置（数据库、MyBatis）
# - API层通过extension-configs引用这个配置
# - 避免重复配置，实现配置复用
#
# ========================================================================

# ========== Spring配置 ==========
spring:
  # ========== 数据源配置 ==========
  # 说明：MySQL数据库连接信息
  # 特点：这是Service层的核心配置，API层会引用这个配置
  datasource:
    # MySQL驱动类
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 数据库连接地址（云服务器MySQL）
    url: jdbc:mysql://101.42.238.233:3306/xuecheng?serverTimezone=UTC&userUnicode=true&useSSL=false&
    # 数据库用户名
    username: root
    # 数据库密码
    password: Hm#2024@MySQL
  
  # ========== 日志输出配置 ==========
  # 启用ANSI彩色日志输出
  output:
    ansi:
      enabled: ALWAYS

# ========== MyBatis Plus配置 ==========
# 说明：持久层框架配置（Service层核心配置）
mybatis-plus:
  # Mapper XML文件位置
  mapper-locations: classpath*:/mapper/**/*.xml
  # 类型别名包路径
  type-aliases-package: com.xuecheng.content.model.po
  # MyBatis配置
  configuration:
    # 开启驼峰命名自动映射
    map-underscore-to-camel-case: true
    # 打印SQL语句到日志（开发环境使用）
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl

# ========================================================================
# 配置说明
# ========================================================================
#
# 1. Service层配置特点：
#    - 只配置业务逻辑相关的内容
#    - 不配置端口、上下文路径（Service层不对外提供HTTP服务）
#    - 不配置Swagger（Service层没有Controller）
#
# 2. API层如何引用：
#    在API层的bootstrap.yml中配置：
#    spring:
#      cloud:
#        nacos:
#          config:
#            extension-configs:
#              - data-id: content-service-dev.yaml
#                group: XUECHENG-PLUS-PROJECT
#                refresh: true
#
# 3. 配置复用的好处：
#    - 避免重复配置数据库信息
#    - 统一管理，修改一处生效
#    - API层本身不需要数据库配置，只是因为依赖Service层才需要
#
# ========================================================================

